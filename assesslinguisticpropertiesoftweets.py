# -*- coding: utf-8 -*-
"""AssessLinguisticPropertiesOfTweets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sYECCFHsOZrlKCvcjTPX9GD7-_QTXo0v
"""

# Zachary Patrone
# 11/5/2021
# Assess the linguistic properties of companies' customer service tweets, then display as a bar chart.
# Calculates the polarity, subjectivity, readability, or formality.

!pip install syllables
import matplotlib.pyplot as plt, nltk, json, requests, syllables, textblob
nltk.download("popular")


def readability(text):
    """Estimates reading level using Flesh-Kincaid Grade Level"""
    blob = textblob.TextBlob(text)
    num_words = len(blob.words)
    num_sent = len(blob.sentences)
    num_syll = 0

    for word in blob.words:
        num_syll += syllables.estimate(word)

    level = 0.39 * (num_words / num_sent) + 11.8 * (num_syll / num_words) - 15.59
    return level


def formality(text):
    """Estimate how formal/informal a text is from 0-100"""
    blob = textblob.TextBlob(text)
    
    f = 0
    c = 0
    for word, tag in blob.tags:
        if ("NN" or "JJ" or "IN" or "DT") in tag:
            f += 1     
        if ("VB" or "PR" or "RB" or "UH") in tag:
            c += 1

    score = 50 * (((f - c)/(f + c)) + 1)
    return score


print("Welcome to the customer service linguistics analyzer!")

response = requests.get("https://dgoldberg.sdsu.edu/515/customer_service_tweets_full.json")

if response:

    data = json.loads(response.text)

    # Adds each tweet to the corresponding company's position in list of tweets
    companies = []
    tweets = []        
    for line in data:
        company = line["Company"]
        text = line["Text"]
        if company not in companies:
            companies.append(company)
            tweets.append(text)
        else:
            tweets[companies.index(company)] += text + " "


    answer = "yes"
    repeat = ["yes", "y", "yess"]
    while answer in repeat:

        analysis = input("Which analysis would you like to perform? (polarity/subjectivity/readability/formality)? ")
        analysis = analysis.lower()

        # Conducts polarity analysis and creates bar chart
        if analysis == "polarity":

            polar_list = []
            for tweet in tweets:
                tweet = textblob.TextBlob(tweet)
                tweet_polar = tweet.polarity
                polar_list.append(tweet_polar)
                print(companies[tweets.index(tweet)] + ": ", end="")
                print(tweet_polar)
            
            plt.title("Polarities by Twitter Handle")
            plt.ylabel("Polarity")
            plt.xlabel("Twitter Handle")
            plt.xticks(rotation=45, ha="right")

            plt.bar(companies, polar_list)
            plt.show()

        # Conducts subjectivity analysis and creates bar chart
        if analysis == "subjectivity":

            subject_list = []
            for tweet in tweets:
                tweet = textblob.TextBlob(tweet)
                tweet_subject = tweet.subjectivity
                subject_list.append(tweet_subject)
                print(companies[tweets.index(tweet)] + ": ", end="")
                print(tweet_subject)
            
            plt.title("Subjectivities by Twitter Handle")
            plt.ylabel("Subjectivity")
            plt.xlabel("Twitter Handle")
            plt.xticks(rotation=45, ha="right")

            plt.bar(companies, subject_list)
            plt.show()

        # Conducts readability analysis and creates bar chart
        if analysis == "readability":
            read_list = []
            for tweet in tweets:
                read_level = readability(tweet)
                read_list.append(read_level)
                print(companies[tweets.index(tweet)] + ": ", end="")
                print(read_level)
            
            
            plt.title("Flesch-Kincaid Levels by Twitter Handle")
            plt.ylabel("Readability")
            plt.xlabel("Twitter Handle")
            plt.xticks(rotation=45, ha="right")

            plt.bar(companies, read_list)
            plt.show()


        # Conducts formailty analysis and creates bar chart
        if analysis == "formality":
            form_list = []
            for tweet in tweets:
                form_level = formality(tweet)
                form_list.append(form_level)
                print(companies[tweets.index(tweet)] + ": ", end="")
                print(form_level)
            
            plt.title("Formality Index by Twitter Handle")
            plt.ylabel("Formality")
            plt.xlabel("Twitter Handle")
            plt.xticks(rotation=45, ha="right")

            plt.bar(companies, form_list)
            plt.show()

        else:
            print("Sorry, that type of analysis is not supported.")
            answer = input("Would you like to run another analysis (yes/no)? ")
            answer = answer.lower()


else:
 print("Sorry, connection error.")